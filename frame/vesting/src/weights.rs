// This file is part of Substrate.

// Copyright (C) 2021 Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for pallet_vesting
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 3.0.0
//! DATE: 2021-07-04, STEPS: `[50, ]`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 128

// Executed Command:
// target/release/substrate
// benchmark
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=pallet_vesting
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output=./frame/vesting/src/weights.rs
// --template=./.maintain/frame-weight-template.hbs


#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_vesting.
pub trait WeightInfo {
	fn vest_locked(l: u32, s: u32, ) -> Weight;
	fn vest_unlocked(l: u32, s: u32, ) -> Weight;
	fn vest_other_locked(l: u32, s: u32, ) -> Weight;
	fn vest_other_unlocked(l: u32, s: u32, ) -> Weight;
	fn last_vested_transfer(l: u32, s: u32, ) -> Weight;
	fn first_vested_transfer(l: u32, ) -> Weight;
	fn first_force_vested_transfer(l: u32, ) -> Weight;
	fn last_force_vested_transfer(l: u32, s: u32, ) -> Weight;
	fn not_unlocking_merge_schedules(l: u32, s: u32, ) -> Weight;
	fn unlocking_merge_schedules(l: u32, s: u32, ) -> Weight;
}

/// Weights for pallet_vesting using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	fn vest_locked(l: u32, s: u32, ) -> Weight {
		(58_117_000 as Weight)
			// Standard Error: 3_000
			.saturating_add((136_000 as Weight).saturating_mul(l as Weight))
			// Standard Error: 12_000
			.saturating_add((177_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	fn vest_unlocked(l: u32, s: u32, ) -> Weight {
		(57_903_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((126_000 as Weight).saturating_mul(l as Weight))
			// Standard Error: 6_000
			.saturating_add((51_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	fn vest_other_locked(l: u32, s: u32, ) -> Weight {
		(57_736_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((140_000 as Weight).saturating_mul(l as Weight))
			// Standard Error: 4_000
			.saturating_add((159_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
	}
	fn vest_other_unlocked(l: u32, s: u32, ) -> Weight {
		(57_278_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((131_000 as Weight).saturating_mul(l as Weight))
			// Standard Error: 5_000
			.saturating_add((68_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
	}
	fn last_vested_transfer(l: u32, _s: u32, ) -> Weight {
		(101_019_000 as Weight)
			// Standard Error: 5_000
			.saturating_add((135_000 as Weight).saturating_mul(l as Weight))
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
	}
	fn first_vested_transfer(l: u32, ) -> Weight {
		(118_733_000 as Weight)
			// Standard Error: 5_000
			.saturating_add((138_000 as Weight).saturating_mul(l as Weight))
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
	}
	fn first_force_vested_transfer(l: u32, ) -> Weight {
		(117_482_000 as Weight)
			// Standard Error: 3_000
			.saturating_add((146_000 as Weight).saturating_mul(l as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(4 as Weight))
	}
	fn last_force_vested_transfer(l: u32, _s: u32, ) -> Weight {
		(100_191_000 as Weight)
			// Standard Error: 6_000
			.saturating_add((144_000 as Weight).saturating_mul(l as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(4 as Weight))
	}
	fn not_unlocking_merge_schedules(l: u32, s: u32, ) -> Weight {
		(71_299_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((115_000 as Weight).saturating_mul(l as Weight))
			// Standard Error: 6_000
			.saturating_add((101_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
	}
	fn unlocking_merge_schedules(l: u32, s: u32, ) -> Weight {
		(70_606_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((151_000 as Weight).saturating_mul(l as Weight))
			// Standard Error: 6_000
			.saturating_add((91_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	fn vest_locked(l: u32, s: u32, ) -> Weight {
		(58_117_000 as Weight)
			// Standard Error: 3_000
			.saturating_add((136_000 as Weight).saturating_mul(l as Weight))
			// Standard Error: 12_000
			.saturating_add((177_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(RocksDbWeight::get().reads(2 as Weight))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
	}
	fn vest_unlocked(l: u32, s: u32, ) -> Weight {
		(57_903_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((126_000 as Weight).saturating_mul(l as Weight))
			// Standard Error: 6_000
			.saturating_add((51_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(RocksDbWeight::get().reads(2 as Weight))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
	}
	fn vest_other_locked(l: u32, s: u32, ) -> Weight {
		(57_736_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((140_000 as Weight).saturating_mul(l as Weight))
			// Standard Error: 4_000
			.saturating_add((159_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(RocksDbWeight::get().reads(3 as Weight))
			.saturating_add(RocksDbWeight::get().writes(3 as Weight))
	}
	fn vest_other_unlocked(l: u32, s: u32, ) -> Weight {
		(57_278_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((131_000 as Weight).saturating_mul(l as Weight))
			// Standard Error: 5_000
			.saturating_add((68_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(RocksDbWeight::get().reads(3 as Weight))
			.saturating_add(RocksDbWeight::get().writes(3 as Weight))
	}
	fn last_vested_transfer(l: u32, _s: u32, ) -> Weight {
		(101_019_000 as Weight)
			// Standard Error: 5_000
			.saturating_add((135_000 as Weight).saturating_mul(l as Weight))
			.saturating_add(RocksDbWeight::get().reads(3 as Weight))
			.saturating_add(RocksDbWeight::get().writes(3 as Weight))
	}
	fn first_vested_transfer(l: u32, ) -> Weight {
		(118_733_000 as Weight)
			// Standard Error: 5_000
			.saturating_add((138_000 as Weight).saturating_mul(l as Weight))
			.saturating_add(RocksDbWeight::get().reads(3 as Weight))
			.saturating_add(RocksDbWeight::get().writes(3 as Weight))
	}
	fn first_force_vested_transfer(l: u32, ) -> Weight {
		(117_482_000 as Weight)
			// Standard Error: 3_000
			.saturating_add((146_000 as Weight).saturating_mul(l as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(4 as Weight))
	}
	fn last_force_vested_transfer(l: u32, _s: u32, ) -> Weight {
		(100_191_000 as Weight)
			// Standard Error: 6_000
			.saturating_add((144_000 as Weight).saturating_mul(l as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(4 as Weight))
	}
	fn not_unlocking_merge_schedules(l: u32, s: u32, ) -> Weight {
		(71_299_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((115_000 as Weight).saturating_mul(l as Weight))
			// Standard Error: 6_000
			.saturating_add((101_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(RocksDbWeight::get().reads(3 as Weight))
			.saturating_add(RocksDbWeight::get().writes(3 as Weight))
	}
	fn unlocking_merge_schedules(l: u32, s: u32, ) -> Weight {
		(70_606_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((151_000 as Weight).saturating_mul(l as Weight))
			// Standard Error: 6_000
			.saturating_add((91_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(RocksDbWeight::get().reads(3 as Weight))
			.saturating_add(RocksDbWeight::get().writes(3 as Weight))
	}
}
