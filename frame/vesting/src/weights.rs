// This file is part of Substrate.

// Copyright (C) 2021 Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for pallet_vesting
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 3.0.0
//! DATE: 2021-07-04, STEPS: `[]`, REPEAT: 1, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: None, WASM-EXECUTION: Compiled, CHAIN: None, DB CACHE: 128

// Executed Command:
// target/release/substrate
// benchmark
// --pallet=pallet-vesting
// --extrinsic=*
// --wasm-execution=compiled
// --output=./frame/vesting/src/weights.rs
// --template=.maintain/frame-weight-template.hbs


#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_vesting.
pub trait WeightInfo {
	fn vest_locked(l: u32, s: u32, ) -> Weight;
	fn vest_unlocked(l: u32, s: u32, ) -> Weight;
	fn vest_other_locked(l: u32, s: u32, ) -> Weight;
	fn vest_other_unlocked(l: u32, s: u32, ) -> Weight;
	fn last_vested_transfer(l: u32, s: u32, ) -> Weight;
	fn first_vested_transfer(l: u32, ) -> Weight;
	fn first_force_vested_transfer(l: u32, ) -> Weight;
	fn last_force_vested_transfer(l: u32, s: u32, ) -> Weight;
	fn not_unlocking_merge_schedules(l: u32, s: u32, ) -> Weight;
	fn unlocking_merge_schedules(l: u32, s: u32, ) -> Weight;
}

/// Weights for pallet_vesting using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	fn vest_locked(l: u32, s: u32, ) -> Weight {
		(50_388_000 as Weight)
			// Standard Error: 57_000
			.saturating_add((123_000 as Weight).saturating_mul(l as Weight))
			// Standard Error: 137_000
			.saturating_add((183_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	fn vest_unlocked(_l: u32, s: u32, ) -> Weight {
		(62_248_000 as Weight)
			// Standard Error: 429_000
			.saturating_add((127_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	fn vest_other_locked(l: u32, s: u32, ) -> Weight {
		(40_181_000 as Weight)
			// Standard Error: 100_000
			.saturating_add((295_000 as Weight).saturating_mul(l as Weight))
			// Standard Error: 239_000
			.saturating_add((509_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
	}
	fn vest_other_unlocked(l: u32, _s: u32, ) -> Weight {
		(79_110_000 as Weight)
			// Standard Error: 265_000
			.saturating_add((17_000 as Weight).saturating_mul(l as Weight))
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
	}
	fn last_vested_transfer(l: u32, s: u32, ) -> Weight {
		(69_185_000 as Weight)
			// Standard Error: 35_000
			.saturating_add((183_000 as Weight).saturating_mul(l as Weight))
			// Standard Error: 85_000
			.saturating_add((265_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
	}
	fn first_vested_transfer(_l: u32, ) -> Weight {
		(94_473_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
	}
	fn first_force_vested_transfer(l: u32, ) -> Weight {
		(75_989_000 as Weight)
			// Standard Error: 22_000
			.saturating_add((141_000 as Weight).saturating_mul(l as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(4 as Weight))
	}
	fn last_force_vested_transfer(l: u32, s: u32, ) -> Weight {
		(72_107_000 as Weight)
			// Standard Error: 121_000
			.saturating_add((92_000 as Weight).saturating_mul(l as Weight))
			// Standard Error: 289_000
			.saturating_add((346_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(4 as Weight))
	}
	fn not_unlocking_merge_schedules(l: u32, s: u32, ) -> Weight {
		(50_015_000 as Weight)
			// Standard Error: 54_000
			.saturating_add((215_000 as Weight).saturating_mul(l as Weight))
			// Standard Error: 139_000
			.saturating_add((375_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
	}
	fn unlocking_merge_schedules(l: u32, s: u32, ) -> Weight {
		(55_278_000 as Weight)
			// Standard Error: 39_000
			.saturating_add((154_000 as Weight).saturating_mul(l as Weight))
			// Standard Error: 101_000
			.saturating_add((71_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	fn vest_locked(l: u32, s: u32, ) -> Weight {
		(50_388_000 as Weight)
			// Standard Error: 57_000
			.saturating_add((123_000 as Weight).saturating_mul(l as Weight))
			// Standard Error: 137_000
			.saturating_add((183_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(RocksDbWeight::get().reads(2 as Weight))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
	}
	fn vest_unlocked(_l: u32, s: u32, ) -> Weight {
		(62_248_000 as Weight)
			// Standard Error: 429_000
			.saturating_add((127_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(RocksDbWeight::get().reads(2 as Weight))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
	}
	fn vest_other_locked(l: u32, s: u32, ) -> Weight {
		(40_181_000 as Weight)
			// Standard Error: 100_000
			.saturating_add((295_000 as Weight).saturating_mul(l as Weight))
			// Standard Error: 239_000
			.saturating_add((509_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(RocksDbWeight::get().reads(3 as Weight))
			.saturating_add(RocksDbWeight::get().writes(3 as Weight))
	}
	fn vest_other_unlocked(l: u32, _s: u32, ) -> Weight {
		(79_110_000 as Weight)
			// Standard Error: 265_000
			.saturating_add((17_000 as Weight).saturating_mul(l as Weight))
			.saturating_add(RocksDbWeight::get().reads(3 as Weight))
			.saturating_add(RocksDbWeight::get().writes(3 as Weight))
	}
	fn last_vested_transfer(l: u32, s: u32, ) -> Weight {
		(69_185_000 as Weight)
			// Standard Error: 35_000
			.saturating_add((183_000 as Weight).saturating_mul(l as Weight))
			// Standard Error: 85_000
			.saturating_add((265_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(RocksDbWeight::get().reads(3 as Weight))
			.saturating_add(RocksDbWeight::get().writes(3 as Weight))
	}
	fn first_vested_transfer(_l: u32, ) -> Weight {
		(94_473_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(3 as Weight))
			.saturating_add(RocksDbWeight::get().writes(3 as Weight))
	}
	fn first_force_vested_transfer(l: u32, ) -> Weight {
		(75_989_000 as Weight)
			// Standard Error: 22_000
			.saturating_add((141_000 as Weight).saturating_mul(l as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(4 as Weight))
	}
	fn last_force_vested_transfer(l: u32, s: u32, ) -> Weight {
		(72_107_000 as Weight)
			// Standard Error: 121_000
			.saturating_add((92_000 as Weight).saturating_mul(l as Weight))
			// Standard Error: 289_000
			.saturating_add((346_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(4 as Weight))
	}
	fn not_unlocking_merge_schedules(l: u32, s: u32, ) -> Weight {
		(50_015_000 as Weight)
			// Standard Error: 54_000
			.saturating_add((215_000 as Weight).saturating_mul(l as Weight))
			// Standard Error: 139_000
			.saturating_add((375_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(RocksDbWeight::get().reads(3 as Weight))
			.saturating_add(RocksDbWeight::get().writes(3 as Weight))
	}
	fn unlocking_merge_schedules(l: u32, s: u32, ) -> Weight {
		(55_278_000 as Weight)
			// Standard Error: 39_000
			.saturating_add((154_000 as Weight).saturating_mul(l as Weight))
			// Standard Error: 101_000
			.saturating_add((71_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(RocksDbWeight::get().reads(3 as Weight))
			.saturating_add(RocksDbWeight::get().writes(3 as Weight))
	}
}
