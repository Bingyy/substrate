// This file is part of Substrate.

// Copyright (C) 2021 Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for pallet_vesting
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 3.0.0
//! DATE: 2021-07-04, STEPS: `[]`, REPEAT: 1, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: None, WASM-EXECUTION: Compiled, CHAIN: None, DB CACHE: 128

// Executed Command:
// target/release/substrate
// benchmark
// --pallet=pallet-vesting
// --extrinsic=*
// --wasm-execution=compiled
// --output=./frame/vesting/src/weights.rs
// --template=.maintain/frame-weight-template.hbs


#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_vesting.
pub trait WeightInfo {
	fn vest_locked(l: u32, ) -> Weight;
	fn vest_unlocked(l: u32, ) -> Weight;
	fn vest_other_locked(l: u32, ) -> Weight;
	fn vest_other_unlocked(l: u32, ) -> Weight;
	fn last_vested_transfer(l: u32, ) -> Weight;
	fn first_vested_transfer(l: u32, ) -> Weight;
	fn first_force_vested_transfer(l: u32, ) -> Weight;
	fn last_force_vested_transfer(l: u32, ) -> Weight;
	fn not_unlocking_merge_schedules(l: u32, ) -> Weight;
	fn unlocking_merge_schedules(l: u32, ) -> Weight;
}

/// Weights for pallet_vesting using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	fn vest_locked(l: u32, ) -> Weight {
		(44_879_000 as Weight)
			// Standard Error: 13_000
			.saturating_add((76_000 as Weight).saturating_mul(l as Weight))
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	fn vest_unlocked(l: u32, ) -> Weight {
		(41_286_000 as Weight)
			// Standard Error: 417_000
			.saturating_add((331_000 as Weight).saturating_mul(l as Weight))
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	fn vest_other_locked(l: u32, ) -> Weight {
		(40_099_000 as Weight)
			// Standard Error: 25_000
			.saturating_add((140_000 as Weight).saturating_mul(l as Weight))
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
	}
	fn vest_other_unlocked(l: u32, ) -> Weight {
		(39_132_000 as Weight)
			// Standard Error: 93_000
			.saturating_add((71_000 as Weight).saturating_mul(l as Weight))
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
	}
	fn last_vested_transfer(l: u32, ) -> Weight {
		(61_648_000 as Weight)
			// Standard Error: 565_000
			.saturating_add((576_000 as Weight).saturating_mul(l as Weight))
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
	}
	fn first_vested_transfer(_l: u32, ) -> Weight {
		(113_429_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
	}
	fn first_force_vested_transfer(l: u32, ) -> Weight {
		(75_462_000 as Weight)
			// Standard Error: 389_000
			.saturating_add((538_000 as Weight).saturating_mul(l as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(4 as Weight))
	}
	fn last_force_vested_transfer(l: u32, ) -> Weight {
		(63_044_000 as Weight)
			// Standard Error: 207_000
			.saturating_add((386_000 as Weight).saturating_mul(l as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(4 as Weight))
	}
	fn not_unlocking_merge_schedules(_l: u32, ) -> Weight {
		(71_495_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
	}
	fn unlocking_merge_schedules(l: u32, ) -> Weight {
		(64_495_000 as Weight)
			// Standard Error: 247_000
			.saturating_add((124_000 as Weight).saturating_mul(l as Weight))
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	fn vest_locked(l: u32, ) -> Weight {
		(44_879_000 as Weight)
			// Standard Error: 13_000
			.saturating_add((76_000 as Weight).saturating_mul(l as Weight))
			.saturating_add(RocksDbWeight::get().reads(2 as Weight))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
	}
	fn vest_unlocked(l: u32, ) -> Weight {
		(41_286_000 as Weight)
			// Standard Error: 417_000
			.saturating_add((331_000 as Weight).saturating_mul(l as Weight))
			.saturating_add(RocksDbWeight::get().reads(2 as Weight))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
	}
	fn vest_other_locked(l: u32, ) -> Weight {
		(40_099_000 as Weight)
			// Standard Error: 25_000
			.saturating_add((140_000 as Weight).saturating_mul(l as Weight))
			.saturating_add(RocksDbWeight::get().reads(3 as Weight))
			.saturating_add(RocksDbWeight::get().writes(3 as Weight))
	}
	fn vest_other_unlocked(l: u32, ) -> Weight {
		(39_132_000 as Weight)
			// Standard Error: 93_000
			.saturating_add((71_000 as Weight).saturating_mul(l as Weight))
			.saturating_add(RocksDbWeight::get().reads(3 as Weight))
			.saturating_add(RocksDbWeight::get().writes(3 as Weight))
	}
	fn last_vested_transfer(l: u32, ) -> Weight {
		(61_648_000 as Weight)
			// Standard Error: 565_000
			.saturating_add((576_000 as Weight).saturating_mul(l as Weight))
			.saturating_add(RocksDbWeight::get().reads(3 as Weight))
			.saturating_add(RocksDbWeight::get().writes(3 as Weight))
	}
	fn first_vested_transfer(_l: u32, ) -> Weight {
		(113_429_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(3 as Weight))
			.saturating_add(RocksDbWeight::get().writes(3 as Weight))
	}
	fn first_force_vested_transfer(l: u32, ) -> Weight {
		(75_462_000 as Weight)
			// Standard Error: 389_000
			.saturating_add((538_000 as Weight).saturating_mul(l as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(4 as Weight))
	}
	fn last_force_vested_transfer(l: u32, ) -> Weight {
		(63_044_000 as Weight)
			// Standard Error: 207_000
			.saturating_add((386_000 as Weight).saturating_mul(l as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(4 as Weight))
	}
	fn not_unlocking_merge_schedules(_l: u32, ) -> Weight {
		(71_495_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(3 as Weight))
			.saturating_add(RocksDbWeight::get().writes(3 as Weight))
	}
	fn unlocking_merge_schedules(l: u32, ) -> Weight {
		(64_495_000 as Weight)
			// Standard Error: 247_000
			.saturating_add((124_000 as Weight).saturating_mul(l as Weight))
			.saturating_add(RocksDbWeight::get().reads(3 as Weight))
			.saturating_add(RocksDbWeight::get().writes(3 as Weight))
	}
}
